---
title: "In-class_Ex05"
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# 27Â  Chapter 27: Modelling, Visualising and Analysing Network Data with R

## 27.1 Overview

In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.

By the end of this hands-on exercise, you will be able to:

-   create graph object data frames, manipulate them using appropriate functions of *dplyr*, *lubridate*, and *tidygraph*,

-   build network graph visualisation using appropriate functions of *ggraph*,

-   compute network geometrics using *tidygraph*,

-   build advanced graph visualisation by incorporating the network geometrics, and

-   build interactive network visualisation using *visNetwork* package.

## 27.2 Getting Started

### 27.2.1 Installing and launching R packages

In this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and [lubridate](https://lubridate.tidyverse.org/), an R package specially designed to handle and wrangling time data will be installed and launched too.

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

## 27.3 The Data

The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.

### 27.3.1 The edges data

-   *GAStech-email_edges.csv* which consists of two weeks of 9063 emails correspondances between 55 employees.

### 27.3.2 The nodes data

-   *GAStech_email_nodes.csv* which consist of the names, department and title of the 55 employees.

### 27.3.3 Importing network data from files

In this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using `read_csv()` of **readr** package.

```{r}
GAStech_nodes <- read_csv("C:/Fay1109/ISSS608-VAA/In-class_Ex/In-class_Ex05/data/GAStech_email_node.csv")
GAStech_edges <- read_csv("C:/Fay1109/ISSS608-VAA/In-class_Ex/In-class_Ex05/data/GAStech_email_edge-v2.csv")
```

### 27.3.4 Reviewing the imported data

Next, we will examine the structure of the data frame using *glimpse()* of **dplyr**.

```{r}
glimpse(GAStech_edges)
```

### 27.3.5 Wrangling time

The code chunk below will be used to perform the changes.

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

### 27.3.6 Reviewing the revised date fields

Table below shows the data structure of the reformatted *GAStech_edges* data frame

### 27.3.7 Wrangling attributes

A close examination of *GAStech_edges* data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.

In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

### 27.3.8 Reviewing the revised edges file

Table below shows the data structure of the reformatted *GAStech_edges* data frame

## 27.4 Creating network objects using **tidygraph**

### 27.4.1 The **tbl_graph** objec

### 27.4.2 The **dplyr** verbs in **tidygraph**

### 27.4.3 Using `tbl_graph()` to build tidygraph data model.

In this section, you will use `tbl_graph()` of **tinygraph** package to build an tidygraph\'s network graph data.frame.

Before typing the codes, you are recommended to review to reference guide of [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html)

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

### 27.4.4 Reviewing the output tidygraph\'s graph object

```{r}
GAStech_graph
```

### 27.4.5 Reviewing the output tidygraph\'s graph object

### 27.4.6 Changing the active object

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```
