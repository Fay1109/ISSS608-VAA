[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on_Ex02",
    "section": "2.2 Getting started",
    "text": "2.2 Getting started\n\n2.2.1 Installing and loading the required libraries\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n2.2.2 Importing data\n\nexam_data <- read_csv(\"C:/Fay1109/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex02/data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n2.3.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on_Ex02",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on_Ex02",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n2.5.1 Creating Composite Graphics: pathwork methods\n\n\n2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\np1 + p2\n\n\n\n\n\n\n2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np12 <- p1|p2\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on_Ex02",
    "section": "2.6 Reference",
    "text": "2.6 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse, ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data <- read_csv(\"C:/Fay1109/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex03/data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n3.4.2 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip <- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"/n Class = \", exam_data$CLASS)) \n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n3.4.3 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\n\n\n3.4.4 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.4.5 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n3.4.6 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n3.4.7 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n3.4.8 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n3.4.9 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "3.5 Interactive Data Visualisation - plotly methods!",
    "text": "3.5 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\n3.5.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n3.5.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n3.5.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n3.5.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd <- highlight_key(exam_data)\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "3.6 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.6 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.6.1 Interactive Data Table: DT package\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n3.6.2 Linked brushing: crosstalk method\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "3.7 Reference",
    "text": "3.7 Reference\n\n3.7.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.7.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n4.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n4.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started-1",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Loading the R packages\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"C:/Fay1109/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex03/data/GlobalPopulation.xls\",sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\nWarning: `mutate_each_()` was deprecated in dplyr 0.7.0.\nℹ Please use `across()` instead.\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Building a static population bubble plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n4.3.2 Building the animated bubble plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "4.4 Animated Data Visualisation: plotly",
    "text": "4.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg <- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] <- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference-1",
    "title": "3 Programming Interactive Data Visualisation with R 4 Programming Animated Statistical Graphics with R",
    "section": "4.5 Reference",
    "text": "4.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "pacman::p_load(tidyverse,gt,rstatix,patchwork)\n\n\nexam_data <- read_csv(\"C:/Fay1109/ISSS608-VAA/In-class_Ex/In-class_Ex04/data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(exam_data,\n      aes(sample=ENGLISH))+\n  stat_qq()+\n  stat_qq_line()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.\n\n\n\n\n\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\n\nShow the code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\n\n\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\n\nShow the code\nGAStech_nodes <- read_csv(\"C:/Fay1109/ISSS608-VAA/In-class_Ex/In-class_Ex05/data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"C:/Fay1109/ISSS608-VAA/In-class_Ex/In-class_Ex05/data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\n\nShow the code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\nThe code chunk below will be used to perform the changes.\n\n\nShow the code\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\n\nShow the code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph's network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\n\nShow the code\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\n\n\nShow the code\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 星期日       5\n2     1     2 星期一       2\n3     1     2 星期二       3\n# ℹ 1,369 more rows\n\n\n\n\n\n\n\n\n\n\nShow the code\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1    40    41 星期六      13\n2    41    43 星期一      11\n3    35    31 星期二      10\n4    40    41 星期一      10\n5    40    43 星期一      10\n6    36    32 星期日       9\n# ℹ 1,366 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Application homepage. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Project/Project.html",
    "href": "Project/Project.html",
    "title": "project",
    "section": "",
    "text": "pacman:: p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse)\n\n\nMC1 <- fromJSON(\"C:/Fay1109/ISSS608-VAA/Project/MC1/data/MC1.json\")\n\n\nMC1_nodes <- as_tibble(MC1$nodes) %>%\n  select(id, type, country)\n\n\nMC1_edges <- as_tibble(MC1$links) %>%\n  select(source, target, type, weight, key)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-age",
    "title": "Take-home_Ex01",
    "section": "Distribution of Age",
    "text": "Distribution of Age\nThe distribution of age shows that the number of people under 20 is less than other groups.\nFor people in other four groups, the numbers of people are similar.\n\n# Create age groups\nparticipants <- participants %>%\n  mutate(age_group = cut(age, breaks = c(0, 20, 30, 40, 50, 60, Inf),\n                         labels = c(\"0-20\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60+\"),\n                         include.lowest = TRUE))\n\n# Distribution of Age\nggplot(data = participants, aes(x = age_group)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Age Group\", y = \"Count\") +\n  ggtitle(\"Distribution of Age\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-education-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-education-level",
    "title": "Take-home_Ex01",
    "section": "Distribution of Education Level",
    "text": "Distribution of Education Level\nThe distribution of educationLevel shows that the number of people with HighSchoolor College degree is the highest, followed by Bachelors degree. The number of people with Low degree is the lowest.\n\n# Distribution of EducationLevel\nggplot(data = participants, aes(x = educationLevel)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Education Level\", y = \"Count\") +\n  ggtitle(\"Distribution of Education Level\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-interest-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-interest-group",
    "title": "Take-home_Ex01",
    "section": "Distribution of interest group",
    "text": "Distribution of interest group\nThe distribution of interest group shows that group J is the most popular one within the population.\n\n# Distribution of InterestGroup\nggplot(data = participants, aes(x = interestGroup)) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Interest Group\", y = \"Count\") +\n  ggtitle(\"Distribution of Interest Group\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-expense-under-each-category",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-expense-under-each-category",
    "title": "Take-home_Ex01",
    "section": "Distribution of expense under each category",
    "text": "Distribution of expense under each category\nCalculate the sum of expense under each category including food, shelter, recreation and education.\n\n# Filter the financial journal for each category and calculate the sum of expenses\nfood_expenses <- financial_journal %>%\n  filter(category == \"Food\") %>%\n  summarise(total_amount = sum(amount))\n\nshelter_expenses <- financial_journal %>%\n  filter(category == \"Shelter\") %>%\n  summarise(total_amount = sum(amount))\n\nrecreation_expenses <- financial_journal %>%\n  filter(category == \"Recreation\") %>%\n  summarise(total_amount = sum(amount))\n\neducation_expenses <- financial_journal %>%\n  filter(category == \"Education\") %>%\n  summarise(total_amount = sum(amount))\n\n# Print the results\nprint(food_expenses)\n\n# A tibble: 1 × 1\n  total_amount\n         <dbl>\n1     3703421.\n\nprint(shelter_expenses)\n\n# A tibble: 1 × 1\n  total_amount\n         <dbl>\n1     6776049.\n\nprint(recreation_expenses)\n\n# A tibble: 1 × 1\n  total_amount\n         <dbl>\n1     4143338.\n\nprint(education_expenses)\n\n# A tibble: 1 × 1\n  total_amount\n         <dbl>\n1      140012.\n\n\nIt can be seen that the expense spent on shelter is the largest among total expense and the expense on education is the least.\n\n# Create a data frame with category and total amount\nexpenses <- data.frame(\n  Category = c(\"Food\", \"Shelter\", \"Recreation\", \"Education\"),\n  TotalAmount = c(food_expenses$total_amount, shelter_expenses$total_amount,\n                  recreation_expenses$total_amount, education_expenses$total_amount)\n)\n\n# Create the bar plot\nggplot(data = expenses, aes(x = Category, y = TotalAmount)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(x = \"Expense Category\", y = \"Total Amount\", title = \"Distribution of Expense Categories\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-total-expense-by-month",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-total-expense-by-month",
    "title": "Take-home_Ex01",
    "section": "Distribution of total expense by month",
    "text": "Distribution of total expense by month\nCalculate the total expense spent by population of each month.\nPlot line chart to show changes across time. It can be seen that the expense reach the highest level in March.\n\nlibrary(lubridate)\n\n# Convert the timestamp column to date format\nfinancial_journal$timestamp <- as.Date(financial_journal$timestamp)\n\n# Extract the month from the timestamp column\nfinancial_journal$month <- month(financial_journal$timestamp)\n\n# Group the financial_journal data by month and category, and calculate the sum of amount\nmonthly_expenses <- financial_journal %>%\n  group_by(month, category) %>%\n  summarize(total_amount = sum(amount))\n\n# Filter the expenses for the four categories\nfiltered_expenses <- monthly_expenses %>%\n  filter(category %in% c(\"Food\", \"Shelter\", \"Recreation\", \"Education\"))\n\n# Sum the expenses by month\nsum_by_month <- filtered_expenses %>%\n  group_by(month) %>%\n  summarize(total_expenses = sum(total_amount))\n\n# Print the resulting data frame\nprint(sum_by_month)\n\n# A tibble: 12 × 2\n   month total_expenses\n   <dbl>          <dbl>\n 1     1       1194726.\n 2     2       1123479.\n 3     3       1623411.\n 4     4       1265334.\n 5     5       1219848.\n 6     6       1187592.\n 7     7       1213307.\n 8     8       1189678.\n 9     9       1174663.\n10    10       1210174.\n11    11       1161012.\n12    12       1199598.\n\n# Plot the line graph\nggplot(sum_by_month, aes(x = month, y = total_expenses, group = 1)) +\n  geom_line() +\n  labs(x = \"Month\", y = \"Total Expenses\", title = \"Sum of Expenses by Month\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +\n  theme_minimal()\n\n\n\n\nCalculate each participant’s wage expense, shelter expense, education expense and recreation expense.\n\n# Calculate the sum of wage group by participantID\nwage_sum <- financial_journal %>%\n  filter(category == \"Wage\") %>%\n  group_by(participantId) %>%\n  summarize(total_wage = sum(amount))\n\n\n# Calculate the sum of shelter group by participantID\nshelter_sum <- financial_journal %>%\n  filter(category == \"Shelter\") %>%\n  group_by(participantId) %>%\n  summarize(total_Shelter = sum(amount))\n\n\n# Calculate the sum of education group by participantID\neducation_sum <- financial_journal %>%\n  filter(category == \"Education\") %>%\n  group_by(participantId) %>%\n  summarize(total_education = sum(amount))\n\n\n# Calculate the sum of food group by participantID\nfood_sum <- financial_journal %>%\n  filter(category == \"Food\") %>%\n  group_by(participantId) %>%\n  summarize(total_food = sum(amount))\n\n\n# Calculate the sum of recreation group by participantID\nrecreation_sum <- financial_journal %>%\n  filter(category == \"Recreation\") %>%\n  group_by(participantId) %>%\n  summarize(total_recreation = sum(amount))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#relationship-between-expense-on-education-and-wage",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#relationship-between-expense-on-education-and-wage",
    "title": "Take-home_Ex01",
    "section": "Relationship between expense on education and wage",
    "text": "Relationship between expense on education and wage\nExplore the relationship between expense on education and wage.\n\ncosts <- merge(education_sum, wage_sum, by = \"participantId\")\n\nThe correlation analysis between total_education and total_wage variables resulted in a Pearson’s product-moment correlation coefficient of 0.2687. This coefficient indicates a positive correlation between the two variables.\nThe test statistic (t-value) is 4.8227 with degrees of freedom (df) equal to 299. The p-value associated with the test statistic is 2.259e-06, which is very small. This low p-value suggests strong evidence against the null hypothesis of no correlation, indicating that there is a significant correlation between total_education and total_wage.\nThe 95% confidence interval for the correlation coefficient ranges from 0.1605 to 0.3705. This interval provides an estimated range within which the true correlation between the variables is likely to fall.\nIn conclusion, based on this analysis, there is a statistically significant positive correlation (0.2687) between the total education expenses and total wage amounts.\n\ncorrelation_test <- cor.test(costs$total_education, costs$total_wage)\nprint(correlation_test)\n\n\n    Pearson's product-moment correlation\n\ndata:  costs$total_education and costs$total_wage\nt = 4.8227, df = 299, p-value = 2.259e-06\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.1604738 0.3704532\nsample estimates:\n      cor \n0.2686522 \n\n\nThe R-squared value of 0.07 indicates that approximately 7% of the variance in the wage variable can be explained by the linear relationship with the education variable. This means that the education level alone explains a small portion of the variation in wages.\nThe equation “wage = 27.88 * education + 36404.3” represents the estimated linear relationship between the education level and wages. The coefficient 27.88 indicates that, on average, for every unit increase in the education level, the wage is expected to increase by approximately 27.88 units.\n\nscatter_plot <- ggplot(costs, aes(x = total_education, y = total_wage)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  xlab(\"Total Education Cost\") +\n  ylab(\"Total Wage Cost\") +\n  ggtitle(\"Relationship between Education Cost and Wage Cost\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Calculate coefficients of the linear regression model\nlm_model <- lm(total_wage ~ total_education, data = costs)\nintercept <- coef(lm_model)[1]\nslope <- coef(lm_model)[2]\n\n# Create the equation string\nequation <- paste0(\"Wage = \", round(slope, 2), \" * Education + \", round(intercept, 2))\n\n# Calculate R-squared value\nr_squared <- round(summary(lm_model)$r.squared, 2)\n\n# Add equation and R-squared as text annotations\nscatter_plot <- scatter_plot +\n  geom_text(x = max(costs$total_education), y = max(costs$total_wage), label = equation, hjust = 1, vjust = 1, color = \"black\") +\n  geom_text(x = max(costs$total_education), y = max(costs$total_wage), label = paste0(\"R-squared = \", r_squared), hjust = 1, vjust = 0, color = \"black\")\n\nprint(scatter_plot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-age-and-joviality.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-age-and-joviality.",
    "title": "Take-home_Ex01",
    "section": "Explore the relationship between age and joviality.",
    "text": "Explore the relationship between age and joviality.\nFirst, divide population into five groups. Then calculate the average joviality of each group.\nIt can be seen from the graph that people in group 4 whose age falls between 45 to 55 have the lowest level of joviality.\n\n# Categorize participants into age groups\nparticipants <- participants %>%\n  mutate(age_group = cut(age, breaks = c(0, 25, 35, 45, 55, Inf),\n                         labels = c(\"Group 1\", \"Group 2\", \"Group 3\", \"Group 4\", \"Group 5\"),\n                         include.lowest = TRUE))\n\n# Calculate average joviality for each age group\navg_joviality <- participants %>%\n  group_by(age_group) %>%\n  summarise(avg_joviality = mean(joviality, na.rm = TRUE))\n\n# Print the average joviality by age group\nprint(avg_joviality)\n\n# A tibble: 5 × 2\n  age_group avg_joviality\n  <fct>             <dbl>\n1 Group 1           0.512\n2 Group 2           0.514\n3 Group 3           0.507\n4 Group 4           0.444\n5 Group 5           0.499\n\n\n\n# Create bar chart\nbar_chart <- ggplot(avg_joviality, aes(x = age_group, y = avg_joviality)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Age Group\", y = \"Average Joviality\", title = \"Average Joviality by Age Group (Bar Chart)\")\n\n# Create line graph\nline_graph <- ggplot(avg_joviality, aes(x = as.numeric(age_group), y = avg_joviality)) +\n  geom_line(color = \"black\", size = 1) +\n  labs(x = \"Age Group\", y = \"Average Joviality\", title = \"Average Joviality by Age Group (Line Graph)\")\n\n# Combine bar chart and line graph\ncombined_plot <- bar_chart +\n  geom_line(data = avg_joviality, aes(x = as.numeric(age_group), y = avg_joviality), color = \"black\", size = 1) +\n  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())\n\n# Display the combined plot\nprint(combined_plot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-joviality-and-havekids.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-joviality-and-havekids.",
    "title": "Take-home_Ex01",
    "section": "Explore the relationship between joviality and havekids.",
    "text": "Explore the relationship between joviality and havekids.\nIt can be seen from the boxplot that there is not too much difference between these two groups.\nThe median of joviality of people who have children is slightly higher than group who do not have children.\n\n# Create a box plot of joviality by haveKids\nggplot(data = participants, aes(x = haveKids, y = joviality)) +\n  geom_boxplot(fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Have Kids\", y = \"Joviality\") +\n  ggtitle(\"Distribution of Joviality by Have Kids\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-household-size-and-shelter-expense.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-household-size-and-shelter-expense.",
    "title": "Take-home_Ex01",
    "section": "Explore the relationship between household size and shelter expense.",
    "text": "Explore the relationship between household size and shelter expense.\nFrom the boxplot we can see that the shelter expense does not exhibit a positive relationship with household size. Household size 2 has the highest median expense while the expense on household size 3 has the highest ceiling expense which is reasonable.\n\n# Merge the shelter sum data with participants data\nshelter_data <- merge(participants, shelter_sum, by = \"participantId\", all.x = TRUE)\n\n# Create box plot\nbox_plot <- ggplot(shelter_data, aes(x = as.factor(householdSize), y = total_Shelter)) +\n  geom_boxplot(fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Household Size\", y = \"Expense on Shelter\", title = \"Relationship between Household Size and Shelter Expense\") +\n  theme_minimal()\n\n# Display the box plot\nprint(box_plot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-wage-and-education-level.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-wage-and-education-level.",
    "title": "Take-home_Ex01",
    "section": "Explore the relationship between wage and education level.",
    "text": "Explore the relationship between wage and education level.\nFrom the graph it can be seen that people with higher education level have higher wage level.\nPeople with graduate degree earn the most and people with low degree earn the least.\n\n# Merge participants data with wage_sum data\nmerged_data <- merge(participants, wage_sum, by = \"participantId\", all.x = TRUE)\n\n# Create a scatter plot\nggplot(data = merged_data, aes(x = educationLevel, y = total_wage)) +\n  geom_point() +\n  labs(x = \"Education Level\", y = \"Total Wage\") +\n  ggtitle(\"Relationship between Education Level and Total Wage\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-wage-and-interest-group.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-wage-and-interest-group.",
    "title": "Take-home_Ex01",
    "section": "Explore the relationship between wage and interest group.",
    "text": "Explore the relationship between wage and interest group.\nFrom the graph it can be seen that there is not too much difference in wage between different groups. The median wage of different interest group is similar.\n\n# Wage and Interest Group\n# Merge wage_sum with participants data\nmerged_data <- merge(participants, wage_sum, by = \"participantId\")\n\n# Create a box plot\nggplot(data = merged_data, aes(x = interestGroup, y = total_wage)) +\n  geom_boxplot(fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Interest Group\", y = \"Total Wage\") +\n  ggtitle(\"Relationship between Wage and Interest Group\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-age-and-wage.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#explore-the-relationship-between-age-and-wage.",
    "title": "Take-home_Ex01",
    "section": "Explore the relationship between age and wage.",
    "text": "Explore the relationship between age and wage.\nFrom the boxplot it can be seen that there is not too much difference in median of wage across different age groups. While people in the first group and the last group have the highest ceiling wage.\n\n# Define age ranges\nage_ranges <- c(\"0-25\", \"26-35\", \"36-45\", \"46-55\", \"56+\")\n\n# Categorize participants into age groups:\nparticipants <- participants %>%\n  mutate(age_group = cut(age, breaks = c(0, 25, 35, 45, 55, Inf),\n                         labels = age_ranges,\n                         include.lowest = TRUE))\n\n# Merge wage_sum with participants data\nmerged_data <- merge(participants, wage_sum, by = \"participantId\")\n\n# Create a box plot\nggplot(data = merged_data, aes(x = age_group, y = total_wage)) +\n  geom_boxplot(fill = \"steelblue\", color = \"black\") +\n  labs(x = \"Age Range\", y = \"Total Wage\") +\n  ggtitle(\"Relationship between Age Range and Wage\")\n\n\n\n\nCalculate the average wage of each age group.\n\n# Calculate average wage for each age group\navg_wage <- merged_data %>%\n  group_by(age_group) %>%\n  summarize(avg_wage = mean(total_wage))\n\n# Print the average wage by age group\nprint(avg_wage)\n\n# A tibble: 5 × 2\n  age_group avg_wage\n  <fct>        <dbl>\n1 0-25        46863.\n2 26-35       44279.\n3 36-45       45936.\n4 46-55       44407.\n5 56+         43845.\n\n\nThe linear regression analysis examined the association between joviality and total wage among the participants. The results revealed a statistically significant relationship between the two variables as the p-value is extremely small. The estimated intercept, representing the joviality when the total wage is zero, was found to be 0.6497. Additionally, the coefficient for the total wage variable was -3.456e-06, indicating that for each unit increase in total wage, the joviality is expected to decrease by 3.456e-06 units, holding other variables constant. The model showed that approximately 13.15% of the variability in joviality can be explained by the linear relationship with total wage, as indicated by the R-squared value. The statistical significance of the F-statistic further supported the overall significance of the model. It shows that the joviality decreases when wage increases.\n\n# Merge participants data with wage_sum data\nmerged_data <- merge(participants, wage_sum, by = \"participantId\", all.x = TRUE)\n\n# Perform linear regression\nlm_model <- lm(joviality ~ total_wage, data = merged_data)\n\n# Print the regression summary\nsummary(lm_model)\n\n\nCall:\nlm(formula = joviality ~ total_wage, data = merged_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.62577 -0.22125  0.00418  0.20937  0.60214 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  6.497e-01  1.523e-02   42.65   <2e-16 ***\ntotal_wage  -3.456e-06  2.796e-07  -12.36   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2717 on 1009 degrees of freedom\nMultiple R-squared:  0.1315,    Adjusted R-squared:  0.1306 \nF-statistic: 152.8 on 1 and 1009 DF,  p-value: < 2.2e-16\n\n\n\n# Create a scatter plot with linear regression line\nggplot(data = merged_data, aes(x = total_wage, y = joviality)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Total Wage\", y = \"Joviality\") +\n  ggtitle(\"Linear Regression: Joviality and Total Wage\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#joviality-age-and-total-wage",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#joviality-age-and-total-wage",
    "title": "Take-home_Ex01",
    "section": "Joviality, Age and Total Wage",
    "text": "Joviality, Age and Total Wage\nCluster 1 has an average joviality of 0.4753, indicating a moderate level of joviality. The average age in this cluster is 51.36533, suggesting that the participants in this group are relatively older. The average total wage for this cluster is 37112.00, which indicates a moderate level of income.\nCluster 2 exhibits a higher average joviality of 0.7306, indicating a higher level of joviality compared to the other clusters. The average age in this cluster is 29.85511, suggesting that the participants in this group are relatively younger. The average total wage for this cluster is 30882.44, indicating a moderate level of income.\nCluster 3 has a lower average joviality of 0.2247, indicating a relatively lower level of joviality. The average age in this cluster is 34.27113, indicating participants of varying ages. Interestingly, this cluster has the highest average total wage of 73274.87, suggesting a relatively higher income level.\n\n# Merge participants and wage_sum datasets\nmerged_data <- merge(participants, wage_sum, by = \"participantId\", all.x = TRUE)\n\n# Select the variables for clustering\ndata <- merged_data[, c(\"joviality\", \"age\", \"total_wage\")]\n\n# Standardize the variables (optional)\ndata <- scale(data)\n\n# Determine the number of clusters (k)\nk <- 3\n\n# Apply k-means clustering\nkmeans_result <- kmeans(data, centers = k)\n\n# Extract the cluster assignments\ncluster_assignments <- kmeans_result$cluster\n\n# Print the cluster assignments\nprint(cluster_assignments)\n\n\n# Add cluster assignments to the merged_data dataframe\nmerged_data$cluster <- cluster_assignments\n\n# Calculate the average values by cluster\ncluster_summary <- merged_data %>%\n  group_by(cluster) %>%\n  summarise(avg_joviality = mean(joviality),\n            avg_age = mean(age),\n            avg_total_wage = mean(total_wage))\n\n# Print the cluster summary\nprint(cluster_summary)\n\n# A tibble: 3 × 4\n  cluster avg_joviality avg_age avg_total_wage\n    <int>         <dbl>   <dbl>          <dbl>\n1       1         0.719    28.9         31786.\n2       2         0.219    35.5         71897.\n3       3         0.514    51.4         35223.\n\n\n\n# Add cluster assignments to the merged_data dataframe\nmerged_data$cluster <- cluster_assignments\n\n# Create scatter plots\nggplot(merged_data, aes(x = age, y = total_wage, color = factor(cluster))) +\n  geom_point() +\n  labs(x = \"Age\", y = \"Total Wage\", color = \"Cluster\") +\n  ggtitle(\"Cluster Analysis: Age vs Total Wage\")\n\n\n\nggplot(merged_data, aes(x = joviality, y = total_wage, color = factor(cluster))) +\n  geom_point() +\n  labs(x = \"Joviality\", y = \"Total Wage\", color = \"Cluster\") +\n  ggtitle(\"Cluster Analysis: Joviality vs Total Wage\")\n\n\n\n\n\nlibrary(GGally)\n\n# Select the variables of interest\ncluster_vars <- merged_data[, c(\"joviality\", \"age\", \"total_wage\", \"cluster\")]\n\n# Create parallel coordinate plot\nggparcoord(cluster_vars, columns = 1:3, groupColumn = \"cluster\", alphaLines = 0.6) +\n  labs(x = \"Variable\", y = \"Value\", color = \"Cluster\") +\n  ggtitle(\"Cluster Analysis: Parallel Coordinate Plot\")"
  },
  {
    "objectID": "Take-home_Ex/Take_home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take_home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "pacman::p_load(jsonlite, tidyverse, tidygraph, ggraph, visNetwork, lubridate, igraph, ggplot2, dplyr, magrittr)\n\n\n\n\n\nmc2_data <- fromJSON(\"C:/Fay1109/ISSS608-VAA/Take-home_Ex/Take_home_Ex02/data/mc2_challenge_graph.json\")\n\n\n\n\n\n\nThe code chunk is used to extract nodes/edges data tables from MC2 list object and save the output in a tibble data frame object called MC2_nodes and MC2_edges.\n\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\n\nmc2_edges <- as_tibble(mc2_data$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu, \n         volumeteu, weightkg, valueofgoodsusd) %>% \n  distinct()\n\nMap hscode to corresponding fish type.\n\nmc2_edges_mapped <- mc2_edges %>%\n  mutate(fishtype = case_when(\n    startsWith(hscode, \"301\") ~ \"live fish\",\n    startsWith(hscode, \"302\") ~ \"fresh fish\",\n    startsWith(hscode, \"303\") ~ \"frozen fish\",\n    startsWith(hscode, \"304\") ~ \"fish meat\",\n    startsWith(hscode, \"305\") ~ \"processed fish\",\n    startsWith(hscode, \"306\") ~ \"crustaceans\",  #like lobster or shrimps\n    startsWith(hscode, \"307\") ~ \"molluscs\",  #like Oysters or Abalone\n    startsWith(hscode, \"308\") ~ \"aquatic invertebrates\", #like Sea cucumbers?\n    startsWith(hscode, \"309\") ~ \"seafood flours\",  #fish powder, shrimp powder?\n    TRUE ~ \"not fish\"\n  ))\n\nVisualization\nThe graph below shows the number of counts in different fish categories being traded along the time. Fish meat is transported with the most frequent times in each year, followed by crustaceans\n\nlibrary(ggplot2)\n\n# Group the data by fishtype and Year and calculate the count\nfish_counts <- mc2_edges_mapped %>%\n  filter(fishtype != \"not fish\") %>%\n  group_by(fishtype, Year) %>%\n  summarise(count = n())\n\n`summarise()` has grouped output by 'fishtype'. You can override using the\n`.groups` argument.\n\n# Plot the graph\nggplot(fish_counts, aes(x = Year, y = count, fill = fishtype)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(x = \"Year\", y = \"Count\", fill = \"Fish Category\") +\n  scale_fill_discrete(name = \"Fish Category\") +\n  scale_y_continuous(labels = function(x) format(x, big.mark = \",\")) +\n  theme_minimal()\n\n\n\n\nThis is the graph showing the distribution of number of companies shipping different types of products. It can be seen that fish meat is shipped by most companies, followed by frozen fish. Live fish and aquatic invertebrates are the least two product categories shipped by companies.\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(magrittr)\n# Filter out the \"not fish\" category\nfiltered_data <- mc2_edges_mapped %>%\n  filter(fishtype != \"not fish\") %>%\n  distinct(source, fishtype)\n\n# Group the data by fishtype and calculate the number of unique companies\nfish_counts <- filtered_data %>%\n  group_by(fishtype) %>%\n  summarise(count = n_distinct(source))\n\n# Plot the bar chart\nggplot(fish_counts, aes(x = fishtype, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(x = \"Fish Type\", y = \"Number of Companies\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nHere is the line chart to show the changes of shipments in different fish types. It can be seen that live fish and processed fish does not change too much in number of shipments. Fish meat and molluscs have some fluctuations in number of shipments and have a decreasing trend from 2033 to 2034. Frozen fish and crustaceans have an increasing trend in number of shipments.\n\nlibrary(ggplot2)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n# Filter out the \"not fish\" category\nfish_counts <- mc2_edges_mapped %>%\n  filter(fishtype != \"not fish\") %>%\n  group_by(fishtype, Year) %>%\n  summarise(total_count = n())\n\n`summarise()` has grouped output by 'fishtype'. You can override using the\n`.groups` argument.\n\n# Plot the line chart\nggplot(fish_counts, aes(x = Year, y = total_count, color = fishtype, group = fishtype)) +\n  geom_line() +\n  geom_point() +\n  labs(x = \"Year\", y = \"Total Number of Shipments\", color = \"Fish Category\") +\n  scale_color_discrete(name = \"Fish Category\") +\n  theme_minimal() +\n  theme(legend.position = \"right\") +\n  scale_y_continuous(labels = comma)\n\n\n\n\nThe line chart below shows the total weight of all categories shipped along these years. It can be seen from the graph that total weights of shipment has an increasing trend from the first year to 2032. Then it has a decreasing trend after 2032. One interesting finding is that most shipment reach the peak value of total weights in quarter 3.\n\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.2.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:igraph':\n\n    groups\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Convert ArrivalDate to a date object\nmc2_edges_mapped$ArrivalDate <- ymd(mc2_edges_mapped$ArrivalDate)\n\n# Extract Year and Quarter from ArrivalDate\nmc2_edges_mapped$Year <- year(mc2_edges_mapped$ArrivalDate)\nmc2_edges_mapped$Quarter <- quarter(mc2_edges_mapped$ArrivalDate)\n\n# Group the data by Year and Quarter and calculate the total weightkg\nweight_by_quarter <- mc2_edges_mapped %>%\n  group_by(Year, Quarter) %>%\n  summarise(total_weight = sum(weightkg))\n\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n\n# Create a combined Year-Quarter label\nweight_by_quarter$YearQuarter <- paste(weight_by_quarter$Year, weight_by_quarter$Quarter, sep = \", \")\n\n# Get the unique years\nunique_years <- unique(weight_by_quarter$Year)\n\n# Plot the line graph with modified x-axis labels\np <- ggplot(weight_by_quarter, aes(x = YearQuarter, y = total_weight, group = 1)) +\n  geom_line() +\n  geom_point() +\n  labs(x = \"Year\", y = \"Total Weight (kg)\") +\n  theme_minimal() +\n  scale_x_discrete(labels = function(x) {\n    ifelse(grepl(\", 1\", x), c(gsub(\",.*\", \"\", x), unique_years[match(gsub(\",.*\", \"\", x), unique_years)]), \"\")\n  }, expand = c(0, 0)) +\n  scale_y_continuous(labels = scales::comma, limits = c(0, max(weight_by_quarter$total_weight) * 1.1), expand = c(0, 0))\n\n# Convert the ggplot object to plotly\np <- ggplotly(p, tooltip = c(\"x\", \"y\"))\n\n# Display the interactive plot\np\n\n\n\n\n\nThis is the line showing the change in total weights of shipment in different fish types. The trend of line in each fish type is very similar to the line plotting the number of shipments in each fish type, which is quite reasonable.\n\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(plotly)\n\n# Convert ArrivalDate to a date object\nmc2_edges_mapped$ArrivalDate <- ymd(mc2_edges_mapped$ArrivalDate)\n\n# Extract Year and Quarter from ArrivalDate\nmc2_edges_mapped$Year <- year(mc2_edges_mapped$ArrivalDate)\nmc2_edges_mapped$Quarter <- quarter(mc2_edges_mapped$ArrivalDate)\n\n# Filter out the \"not fish\" category\nfish_weights <- mc2_edges_mapped %>%\n  filter(fishtype != \"not fish\") %>%\n  group_by(fishtype, Year) %>%\n  summarise(total_weight = sum(weightkg))\n\n`summarise()` has grouped output by 'fishtype'. You can override using the\n`.groups` argument.\n\n# Create a combined Year-Quarter label\nfish_weights$YearQuarter <- paste(fish_weights$Year, fish_weights$Quarter, sep = \", \")\n\nWarning: Unknown or uninitialised column: `Quarter`.\n\n# Plot the line chart\np <- ggplot(fish_weights, aes(x = YearQuarter, y = total_weight, color = fishtype, group = fishtype)) +\n  geom_line() +\n  geom_point() +\n  labs(x = \"Year\", y = \"Total Weight (kg)\", color = \"Fish Category\") +\n  scale_color_discrete(name = \"Fish Category\") +\n  theme_minimal() +\n  theme(legend.position = \"right\") +\n  scale_y_continuous(labels = comma)\n\n# Convert the ggplot object to plotly\np <- ggplotly(p, tooltip = c(\"x\", \"y\"))\n\n# Display the interactive plot\np\n\n\n\n\n\n\nmc2_edges_aggregated <- mc2_edges_mapped %>%\n  filter(fishtype != \"no fish\") %>%\n  mutate(Year = as.character(Year), Quarter = as.character(Quarter)) %>%\n  filter((Year == \"2032\" & Quarter == \"3\") | (Year != \"2032\")) %>%\n  group_by(source, target, fishtype, Year) %>%\n  summarise(weights = n()) %>%\n  filter(source != target) %>%\n  filter(weights > 20) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'source', 'target', 'fishtype'. You can\noverride using the `.groups` argument.\n\n\n\nid1 <- mc2_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nid2 <- mc2_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nmc2_nodes_extracted <- rbind(id1, id2) %>%\n  distinct()\n\n\nmc2_graph <- tbl_graph(nodes = mc2_nodes_extracted,\n                       edges = mc2_edges_aggregated,\n                       directed = TRUE)\n\n\nggraph(mc2_graph,\n       layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes()) +\n  theme_graph()\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\nedges_df <- mc2_graph %>%\n  activate(edges) %>%\n  as.tibble()\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n\nwrite_rds(mc2_nodes_extracted, \"data/mc2_nodes_extracted.rds\")\nwrite_rds(mc2_edges_aggregated, \"data/mc2_edges_aggregated.rds\")\nwrite_rds(mc2_graph, \"data/mc2_graph.rds\")\n\n\nmc2_graph\n\n# A tbl_graph: 6664 nodes and 35991 edges\n#\n# A directed multigraph with 104 components\n#\n# A tibble: 6,664 × 1\n  id                                          \n  <chr>                                       \n1 \" Direct Limited Liability Company Shipping\"\n2 \" Direct S.A. de C.V.\"                      \n3 \" Direct Shark Oyj Marine sanctuary\"        \n4 \"-28\"                                       \n5 \"-64\"                                       \n6 \"1 AS Marine sanctuary\"                     \n# ℹ 6,658 more rows\n#\n# A tibble: 35,991 × 5\n   from    to fishtype Year  weights\n  <int> <int> <chr>    <chr>   <int>\n1     1  3848 not fish 2028       25\n2     1  3848 not fish 2029       28\n3     2  3849 not fish 2033       35\n# ℹ 35,988 more rows\n\n\n\nedges_df <- mc2_graph %>%\n  activate(edges) %>%\n  as.tibble()\n\n\nnodes_df <- mc2_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id = row_number())\n\nThe network below shows the interaction between shipping and receiving countries. The graph represents various nodes (representing entities such as countries or regions) and edges (representing trade connections). visNetwork function is used to create the graph, with the nodes and edges as input. The layout of the graph is determined by the “layout_with_fr” option, which utilizes the Fruchterman-Reingold algorithm. The edges are displayed with curved arrows for visual clarity.\n\nlibrary(visNetwork)\nlibrary(igraph)\n\n# Create the graph from the data frame\ngraph <- graph_from_data_frame(mc2_edges, directed = FALSE)\n\n# Calculate the number of edges for each node (node degrees)\nnode_degrees <- degree(graph)\n\n# Sort the nodes based on the number of edges in descending order\nsorted_nodes <- nodes_df[order(-node_degrees), ]\n\n# Get the top 20 nodes\ntop_twenty_nodes <- sorted_nodes[1:20, ]\n\n# Create the visNetwork graph\nvisNetwork(nodes_df, edges_df, main = \"FishEye Trade Network\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\")) %>%\n  visNodes(label = nodes_df$label, title = nodes_df$label) %>%\n  visOptions(highlightNearest = list(enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE,\n             selectedBy = \"label\") %>%\n  visInteraction(hover = TRUE) %>%\n  visNodes(id = top_twenty_nodes$id, borderWidth = 3, color = list(border = \"red\")) %>%\n  visNodes(id = setdiff(nodes_df$id, top_twenty_nodes$id), color = list(border = \"gray\"))"
  }
]